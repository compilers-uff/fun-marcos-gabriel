sload pi
sload basic-lex

---| Load id-exp-list.maude
sload id-exp-list


fmod FUN-LEX is 
     inc LEXICAL .
     inc BASIC-LEX .

	---| Add ¸ keyword to separate arguments on argument list
     eq keywords = ('fun '`( '`) '= '`, '~ '+ '- '* '/ '>= '> '<= '< '== 'or 'and 'if 'then 'else '¸) .
     eq ignore = nil .

     var Q : Qid .
     eq $lexQid(Q) =
        if ignore?(Q) then nil  
        else if isRat(Q) then mkRat(Q)
        else if isString(Q) then mkString(Q)
        else if isFloat(Q) then mkFloat(Q)
        else mkIdn(Q) 
        fi fi fi fi .

     op mkRat : Qid -> Qid .
     eq mkRat(Q) = tokenize("rat(" + printTokens(Q) + ")") .

     op mkString : Qid -> Qid .
     eq mkString(Q) = tokenize("str(" + printTokens(Q) + ")") .

     op mkFloat : Qid -> Qid .
     eq mkFloat(Q) = tokenize("flo(" + printTokens(Q) + ")") .

     op mkIdn : Qid -> Qid .
     eq mkIdn(Q) = tokenize("idn('" + printTokens(Q) + ")") .
endfm

fmod FUN-GRM is
     inc QID .
     inc RAT .
     inc FLOAT .
     inc STRING .
     inc BOOL .

	---| Include IDEXPLIST from id-exp-list
     inc IDEXPLIST .
    
	---| Define Expr as subtype of List
	 subsort Idn Val < Expr < List .

     op idn : Qid -> Idn .
     op rat : Rat -> Val .
     op flo : Float -> Val .
     op str : String -> Val . 
     op boo : Bool -> Val .
     ops _+_ _*_ _-_ _/_ _==_ _<_ _<=_ _>_ _>=_ _or_ _and_ : Expr Expr -> Expr [gather(E e) prec 20] .
     op ~_ : Expr -> Expr .
     op if_then_else_ : Expr Expr Expr -> Expr [prec 40] .

	 ---| Adding List to accepted function definition arguments
     op fun_(_) =_ : Idn List Expr -> Expr [prec 50] .
     
	 ---| Adding List to accepted function call arguments
	 op _(_) : Idn List -> Expr [prec 10] .
     
	 op _,_ : Expr Expr -> Expr [prec 60 assoc] .
 endfm 

fmod FUN-PARSER is 
     inc FUN-LEX .
     inc FUN-GRM .
     inc META-LEVEL * (op id to ml-id) .
     op parse : String -> Expr .
     op parseToTerm : String -> ResultPair? .
     op $errorExpr : ~> Expr .
     var S : String .
     eq parse(S) = downTerm(getTerm(
                    metaParse(upModule('FUN-GRM, false), lex(S), 'Expr)), $errorExpr) . 
     eq parseToTerm(S) = metaParse(upModule('FUN-GRM, false), lex(S), 'Expr) . 
endfm

fmod FUN-TRAN2 is
     inc FUN-GRM .
     inc BASIC-VALUES .
     inc ID-IR .
     inc REC-IR .

	---| Include IDEXPLISP from id-exp-list
     inc IDEXPLIST .
    
	---| Include FORMALS and ACTUALS from pi
	 inc FORMALS .
     inc ACTUALS .

     op compileIdn : Idn -> Id .
     var Q : Qid .
     eq compileIdn(idn(Q)) = id(Q) .

     op compileExpr : Expr -> Statement .

     var R : Rat . var F : Float . var S : String . var B : Bool .
     vars E E1 E2 E3 : Expr .
     var I I1 I2 : Idn .

     eq compileExpr(rat(R)) = exp(val(R)) .
     eq compileExpr(flo(F)) = exp(val(F)) .
     eq compileExpr(str(S)) = exp(val(S)) .
     eq compileExpr(boo(B)) = exp(val(B)) .
     eq compileExpr(idn(Q)) = exp(id(Q)) .

     eq compileExpr(E1 + E2) = sum(compileExpr(E1), compileExpr(E2)) .
     eq compileExpr(E1 - E2) = sub(compileExpr(E1), compileExpr(E2)) .
     eq compileExpr(E1 * E2) = mul(compileExpr(E1), compileExpr(E2)) .
     eq compileExpr(E1 / E2) = div(compileExpr(E1), compileExpr(E2)) .
     eq compileExpr(E1 > E2) = gth(compileExpr(E1), compileExpr(E2)) .
     eq compileExpr(E1 < E2) = lth(compileExpr(E1), compileExpr(E2)) .
     eq compileExpr(E1 >= E2) = geq(compileExpr(E1), compileExpr(E2)) .
     eq compileExpr(E1 <= E2) = leq(compileExpr(E1), compileExpr(E2)) .
     eq compileExpr(E1 == E2) = equ(compileExpr(E1), compileExpr(E2)) .
     eq compileExpr(E1 or E2) = lor(compileExpr(E1), compileExpr(E2)) .
     eq compileExpr(E1 and E2) = lan(compileExpr(E1), compileExpr(E2)) .
     eq compileExpr(~ E) = not(compileExpr(E)) .

     eq compileExpr(if E1 then E2 else E3) = 
        ite(compileExpr(E1), compileExpr(E2), compileExpr(E3)) .
	
	---| Argument list (used to define the type)
     var args : List .

	---| Transforms list on formals, then compiles the remaing ids
     op formalsList : List -> Formals .
     eq formalsList(args) = if getTailId(args) == nil
	 							---| Compiles head and finishes recursion
                            	then compileIdn(getHeadId(args))
								---| Compiles head and calls recursively for the tail
                            	else compileIdn(getHeadId(args)) formalsList(getTailId(args))
                            fi .

	---| Transforms list on actuals, then compiles the remaing expressions
     op actualsList : List -> Actuals .
     eq actualsList(args) = if getTailExpr(args) == nil 
	 							---| Compiles head and finishes recursion
                                then compileExpr(getHeadExpr(args))
								---| Calls recursively for the tail and compiles head
                                else actualsList(getTailExpr(args)) compileExpr(getHeadExpr(args))
                            fi .

	---| Accepts argument list on declaration
     eq compileExpr(fun I1 (args) = E) = compileDec(fun I1 (args) = E) .

	---| Accepts argument list on call
     eq compileExpr(I(args)) = recapp(compileIdn(I), actualsList(args)) .

	---| Accepts argument list on declaration compilation
     eq compileExpr((fun I1 (args) = E1, E2)) = 
        let(compileDec(fun I1 (args) = E1), compileExpr(E2)) .

	---| Accepts argument list on call compilation
     op compileDec : Expr -> Dec .
     eq compileDec(fun I1 (args) = E) = 
        rec(compileIdn(I1), lambda(formalsList(args), compileExpr(E))) . 

endfm

fmod FUN-RUN-TIME is 
     inc FUN-LEX .
     inc FUN-PARSER . 
     inc FUN-TRAN2 . 
     inc REC-ABS-AUTOMATON .
     inc CONVERSION .
     inc NAT .
     
     op exec : Exp -> State .
     op fexe : Exp Nat -> State .
     op comp : Expr -> Exp .
     op out : State -> Value .
     op pp : Value -> String .
     op initCtx : -> PreState .

     op getRat : Value -> Rat .
     var E : Expr . var Epi : Exp . var V : Stack{Value} . var ... : PreState . 
     var R : Rat . var S : String . var F : Float . var N : Nat .

     eq comp(E) = compileExpr(E) .
     eq initCtx = val : (∅).Stack{Value}, env : (∅).Env .

     eq exec(Epi) = 
        δ*( [cnt : [cnt(Epi)], initCtx] ) .

     eq out([val : V, ...]) = top(V) .

     eq pp(val(R)) = string(R, 10) .
     eq pp(val(F)) = string(F) .
     eq pp(val(S)) = S .
endfm